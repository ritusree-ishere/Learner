
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String      @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  role          UserRole @default(USER)
  firstName      String?
  lastName        String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  k12Details    K12Details?
  learnings Learnings[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}



model K12Details {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  school    String?
  grade     String?
  board     String? 
  stream    String? 
  city      String?
  country   String?
  state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("k12_details")

}

enum Status{
IN_PROGRESS
COMPLETED
FAILED
}

model Learnings {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  initialQuiz      String?
  initialQuizScore Int?
  recommendedVideos Json? 
  finalExam        String?
  finalExamScore   Int?
  result           Boolean? @default(false)
  status           Status @default(IN_PROGRESS)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

